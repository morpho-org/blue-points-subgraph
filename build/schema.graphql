
type Market @entity {
  id: Bytes!
  supplyShares: BigInt!

  epochs: [MarketEpoch!]! @derivedFrom(field: "market")
  lastEpoch: MarketEpoch
  lastCheckTimestamp: BigInt!
  rewardsAccrued: BigInt!
}

type Epoch @entity {
  id: String!
  start: BigInt!
  end: BigInt!
  totalDistributed: BigInt!
  rewardsAccrued: BigInt!
  previousEpoch: Epoch
  nextEpoch: Epoch
}

type MarketEpoch @entity {
  id: String!
  market: Market!
  epoch: Epoch!
  "36 decimals precision"
  rate: BigInt!
  totalRewardsAccrued: BigInt!
  lastUpdateTimestamp: BigInt!
  rewardsSupplyIndex: BigInt!
}

type User @entity {
  id: Bytes!
  balances: [Balance!]! @derivedFrom(field: "user")
  rewardsAccrued: BigInt!
}

type Balance @entity {
  id: String!
  user: User!
  market: Market!
  supplyShares: BigInt!
  rewardsAccrued: BigInt!
  lastEpochUpdate: Epoch
  lastUpdateTimestamp: BigInt!
}


type MarketEpochUser @entity {
  id: String!
  marketEpoch: MarketEpoch!
  user: User!
  rewardsSupplyIndex: BigInt!
  rewardsAccrued: BigInt!
}

type CurrentEpoch @entity {
  "1"
  id: String!
  epoch: Epoch
}

type _FeeRecipient @entity {
  "1"
  id: String!
  feeReceiver: Bytes!
}